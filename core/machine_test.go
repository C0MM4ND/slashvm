package core

import (
	"bytes"
	"encoding/hex"
	"testing"

	"github.com/c0mm4nd/slashvm/core/exits"
)

func test(t *testing.T, name string, code string, data string, ret string) {
	rawCode, _ := hex.DecodeString(code)
	rawData, _ := hex.DecodeString(data)
	rawReturn, _ := hex.DecodeString(ret)

	vm := NewMachine(rawCode, rawData, 1024, 10_000)
	err, trap := vm.Run()
	if err != exits.Returned || trap != nil {
		t.Logf("%v: %v, %v", name, err, trap)
		t.Fail()
	}
	val := vm.ReturnValue()
	if !bytes.Equal(val, rawReturn) {
		t.Logf("%s: %x != %x", name, val, rawReturn)
		t.Fail()
	}
}

func TestVM(t *testing.T) {
	test(t,
		"ackermann31",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"2839e92800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001",
		"000000000000000000000000000000000000000000000000000000000000000d",
	)

	test(t,
		"ackermann32",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"2839e92800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002",
		"000000000000000000000000000000000000000000000000000000000000001d",
	)

	test(t,
		"fibonacci10",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"61047ff4000000000000000000000000000000000000000000000000000000000000000a",
		"0000000000000000000000000000000000000000000000000000000000000037",
	)

	test(t,
		"fibonacci16",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"61047ff40000000000000000000000000000000000000000000000000000000000000010",
		"00000000000000000000000000000000000000000000000000000000000003db",
	)
}

func bench(b *testing.B, name string, code string, data string, ret string) {
	rawCode, _ := hex.DecodeString(code)
	rawData, _ := hex.DecodeString(data)
	rawReturn, _ := hex.DecodeString(ret)

	vm := NewMachine(rawCode, rawData, 1024, 10_000)
	err, trap := vm.Run()
	if err != exits.Returned || trap != nil {
		b.Logf("%v: %v, %v", name, err, trap)
		b.Fail()
	}
	val := vm.ReturnValue()
	if !bytes.Equal(val, rawReturn) {
		b.Logf("%s: %x != %x", name, val, rawReturn)
		b.Fail()
	}
}

func BenchmarkVM(b *testing.B) {
	bench(b,
		"ackermann31",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"2839e92800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000001",
		"000000000000000000000000000000000000000000000000000000000000000d",
	)

	bench(b,
		"ackermann32",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"2839e92800000000000000000000000000000000000000000000000000000000000000030000000000000000000000000000000000000000000000000000000000000002",
		"000000000000000000000000000000000000000000000000000000000000001d",
	)

	bench(b,
		"fibonacci10",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"61047ff4000000000000000000000000000000000000000000000000000000000000000a",
		"0000000000000000000000000000000000000000000000000000000000000037",
	)

	bench(b,
		"fibonacci16",
		"60e060020a6000350480632839e92814601e57806361047ff414603457005b602a6004356024356047565b8060005260206000f35b603d6004356099565b8060005260206000f35b600082600014605457605e565b8160010190506093565b81600014606957607b565b60756001840360016047565b90506093565b609060018403608c85600186036047565b6047565b90505b92915050565b6000816000148060a95750816001145b60b05760b7565b81905060cf565b60c1600283036099565b60cb600184036099565b0190505b91905056",
		"61047ff40000000000000000000000000000000000000000000000000000000000000010",
		"00000000000000000000000000000000000000000000000000000000000003db",
	)
}
